<?php

/**
 * Shipment
 *
 * PHP version 8.1
 *
 * @package  Dhl\Rest\Shipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Parcel DE Shipping API (Post & Parcel Germany)
 *
 * Note: This is the specification of the DPDHL Group Parcel DE Shipping API for Post & Parcel Germany. This REST web service allows business customers to create shipping labels on demand.
 *
 * The version of the OpenAPI document: 2.1.12
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dhl\Rest\Shipping\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Dhl\Rest\Shipping\ObjectSerializer;

/**
 * Shipment Class Doc Comment
 *
 * @description Container for all shipments. Mixed shipment products per request are supported. Each shipment has a dedicated shipper address (or shipper reference, or both).
 * @package  Dhl\Rest\Shipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class Shipment implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Shipment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'product' => 'string',
        'billing_number' => 'string',
        'ref_no' => 'string',
        'cost_center' => 'string',
        'creation_software' => 'string',
        'ship_date' => '\DateTime',
        'shipper' => '\Dhl\Rest\Shipping\Model\ShipmentShipper',
        'consignee' => '\Dhl\Rest\Shipping\Model\Consignee',
        'details' => '\Dhl\Rest\Shipping\Model\ShipmentDetails',
        'services' => '\Dhl\Rest\Shipping\Model\VAS',
        'customs' => '\Dhl\Rest\Shipping\Model\CustomsDetails'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'product' => null,
        'billing_number' => null,
        'ref_no' => null,
        'cost_center' => null,
        'creation_software' => null,
        'ship_date' => 'date',
        'shipper' => null,
        'consignee' => null,
        'details' => null,
        'services' => null,
        'customs' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'product' => false,
        'billing_number' => false,
        'ref_no' => false,
        'cost_center' => false,
        'creation_software' => false,
        'ship_date' => false,
        'shipper' => false,
        'consignee' => false,
        'details' => false,
        'services' => false,
        'customs' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'product' => 'product',
        'billing_number' => 'billingNumber',
        'ref_no' => 'refNo',
        'cost_center' => 'costCenter',
        'creation_software' => 'creationSoftware',
        'ship_date' => 'shipDate',
        'shipper' => 'shipper',
        'consignee' => 'consignee',
        'details' => 'details',
        'services' => 'services',
        'customs' => 'customs'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'product' => 'setProduct',
        'billing_number' => 'setBillingNumber',
        'ref_no' => 'setRefNo',
        'cost_center' => 'setCostCenter',
        'creation_software' => 'setCreationSoftware',
        'ship_date' => 'setShipDate',
        'shipper' => 'setShipper',
        'consignee' => 'setConsignee',
        'details' => 'setDetails',
        'services' => 'setServices',
        'customs' => 'setCustoms'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'product' => 'getProduct',
        'billing_number' => 'getBillingNumber',
        'ref_no' => 'getRefNo',
        'cost_center' => 'getCostCenter',
        'creation_software' => 'getCreationSoftware',
        'ship_date' => 'getShipDate',
        'shipper' => 'getShipper',
        'consignee' => 'getConsignee',
        'details' => 'getDetails',
        'services' => 'getServices',
        'customs' => 'getCustoms'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('product', $data ?? [], null);
        $this->setIfExists('billing_number', $data ?? [], null);
        $this->setIfExists('ref_no', $data ?? [], null);
        $this->setIfExists('cost_center', $data ?? [], null);
        $this->setIfExists('creation_software', $data ?? [], null);
        $this->setIfExists('ship_date', $data ?? [], null);
        $this->setIfExists('shipper', $data ?? [], null);
        $this->setIfExists('consignee', $data ?? [], null);
        $this->setIfExists('details', $data ?? [], null);
        $this->setIfExists('services', $data ?? [], null);
        $this->setIfExists('customs', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (!is_null($this->container['billing_number']) && !preg_match("/\\w{10}\\d{2}\\w{2}/", $this->container['billing_number'])) {
            $invalidProperties[] = "invalid value for 'billing_number', must be conform to the pattern /\\w{10}\\d{2}\\w{2}/.";
        }

        if (!is_null($this->container['ref_no']) && (mb_strlen($this->container['ref_no']) > 35)) {
            $invalidProperties[] = "invalid value for 'ref_no', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['ref_no']) && (mb_strlen($this->container['ref_no']) < 8)) {
            $invalidProperties[] = "invalid value for 'ref_no', the character length must be bigger than or equal to 8.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets product
     *
     * @return string|null
     */
    public function getProduct(): ?string
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param string|null $product Determines the DHL Paket product to be used.  * V01PAK: DHL PAKET; * V53WPAK: DHL PAKET International; * V54EPAK: DHL Europaket; * V62WP: Warenpost (will be replaced by DHL Kleinpaket from 1.1.2025); * V62KP: DHL Kleinpaket; * V66WPI: Warenpost International
     *
     * @return $this
     */
    public function setProduct(?string $product): static
    {
        if (is_null($product)) {
            throw new InvalidArgumentException('non-nullable product cannot be null');
        }
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets billing_number
     *
     * @return string|null
     */
    public function getBillingNumber(): ?string
    {
        return $this->container['billing_number'];
    }

    /**
     * Sets billing_number
     *
     * @param string|null $billing_number 14 digit long number that identifies the contract the shipment is booked on. Please note that in rare cases the last to characters can be letters. Digit 11 and digit 12 must correspondent to the number of the product, e.g. 333333333301tt can only be used for the product V01PAK (DHL Paket).
     *
     * @return $this
     */
    public function setBillingNumber(?string $billing_number): static
    {
        if (is_null($billing_number)) {
            throw new InvalidArgumentException('non-nullable billing_number cannot be null');
        }

        if ((!preg_match("/\\w{10}\\d{2}\\w{2}/", ObjectSerializer::toString($billing_number)))) {
            throw new InvalidArgumentException("invalid value for \$billing_number when calling Shipment., must conform to the pattern /\\w{10}\\d{2}\\w{2}/.");
        }

        $this->container['billing_number'] = $billing_number;

        return $this;
    }

    /**
     * Gets ref_no
     *
     * @return string|null
     */
    public function getRefNo(): ?string
    {
        return $this->container['ref_no'];
    }

    /**
     * Sets ref_no
     *
     * @param string|null $ref_no A reference number that the user can assign for better association purposes. It appears on shipment labels. To use the reference number for tracking purposes, it should be at least 8 characters long and unique.
     *
     * @return $this
     */
    public function setRefNo(?string $ref_no): static
    {
        if (is_null($ref_no)) {
            throw new InvalidArgumentException('non-nullable ref_no cannot be null');
        }
        if ((mb_strlen($ref_no) > 35)) {
            throw new InvalidArgumentException('invalid length for $ref_no when calling Shipment., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($ref_no) < 8)) {
            throw new InvalidArgumentException('invalid length for $ref_no when calling Shipment., must be bigger than or equal to 8.');
        }

        $this->container['ref_no'] = $ref_no;

        return $this;
    }

    /**
     * Gets cost_center
     *
     * @return string|null
     */
    public function getCostCenter(): ?string
    {
        return $this->container['cost_center'];
    }

    /**
     * Sets cost_center
     *
     * @param string|null $cost_center Textfield that appears on the shipment label. It cannot be used to search for the shipment.
     *
     * @return $this
     */
    public function setCostCenter(?string $cost_center): static
    {
        if (is_null($cost_center)) {
            throw new InvalidArgumentException('non-nullable cost_center cannot be null');
        }
        $this->container['cost_center'] = $cost_center;

        return $this;
    }

    /**
     * Gets creation_software
     *
     * @return string|null
     */
    public function getCreationSoftware(): ?string
    {
        return $this->container['creation_software'];
    }

    /**
     * Sets creation_software
     *
     * @param string|null $creation_software Is only to be indicated by DHL partners.
     *
     * @return $this
     */
    public function setCreationSoftware(?string $creation_software): static
    {
        if (is_null($creation_software)) {
            throw new InvalidArgumentException('non-nullable creation_software cannot be null');
        }
        $this->container['creation_software'] = $creation_software;

        return $this;
    }

    /**
     * Gets ship_date
     *
     * @return \DateTime|null
     */
    public function getShipDate(): ?\DateTime
    {
        return $this->container['ship_date'];
    }

    /**
     * Sets ship_date
     *
     * @param \DateTime|null $ship_date Date the shipment is transferred to DHL. The shipment date can be the current date or a date up to a few days in the future. It must not be in the past. Iso format required: yyyy-mm-dd. On the shipment date the shipment will be automatically closed at your end of day closing time.
     *
     * @return $this
     */
    public function setShipDate(?\DateTime $ship_date): static
    {
        if (is_null($ship_date)) {
            throw new InvalidArgumentException('non-nullable ship_date cannot be null');
        }
        $this->container['ship_date'] = $ship_date;

        return $this;
    }

    /**
     * Gets shipper
     *
     * @return \Dhl\Rest\Shipping\Model\ShipmentShipper|null
     */
    public function getShipper(): ?\Dhl\Rest\Shipping\Model\ShipmentShipper
    {
        return $this->container['shipper'];
    }

    /**
     * Sets shipper
     *
     * @param \Dhl\Rest\Shipping\Model\ShipmentShipper|null $shipper shipper
     *
     * @return $this
     */
    public function setShipper(?\Dhl\Rest\Shipping\Model\ShipmentShipper $shipper): static
    {
        if (is_null($shipper)) {
            throw new InvalidArgumentException('non-nullable shipper cannot be null');
        }
        $this->container['shipper'] = $shipper;

        return $this;
    }

    /**
     * Gets consignee
     *
     * @return \Dhl\Rest\Shipping\Model\Consignee|null
     */
    public function getConsignee(): ?\Dhl\Rest\Shipping\Model\Consignee
    {
        return $this->container['consignee'];
    }

    /**
     * Sets consignee
     *
     * @param \Dhl\Rest\Shipping\Model\Consignee|null $consignee consignee
     *
     * @return $this
     */
    public function setConsignee(?\Dhl\Rest\Shipping\Model\Consignee $consignee): static
    {
        if (is_null($consignee)) {
            throw new InvalidArgumentException('non-nullable consignee cannot be null');
        }
        $this->container['consignee'] = $consignee;

        return $this;
    }

    /**
     * Gets details
     *
     * @return \Dhl\Rest\Shipping\Model\ShipmentDetails|null
     */
    public function getDetails(): ?\Dhl\Rest\Shipping\Model\ShipmentDetails
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param \Dhl\Rest\Shipping\Model\ShipmentDetails|null $details details
     *
     * @return $this
     */
    public function setDetails(?\Dhl\Rest\Shipping\Model\ShipmentDetails $details): static
    {
        if (is_null($details)) {
            throw new InvalidArgumentException('non-nullable details cannot be null');
        }
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets services
     *
     * @return \Dhl\Rest\Shipping\Model\VAS|null
     */
    public function getServices(): ?\Dhl\Rest\Shipping\Model\VAS
    {
        return $this->container['services'];
    }

    /**
     * Sets services
     *
     * @param \Dhl\Rest\Shipping\Model\VAS|null $services services
     *
     * @return $this
     */
    public function setServices(?\Dhl\Rest\Shipping\Model\VAS $services): static
    {
        if (is_null($services)) {
            throw new InvalidArgumentException('non-nullable services cannot be null');
        }
        $this->container['services'] = $services;

        return $this;
    }

    /**
     * Gets customs
     *
     * @return \Dhl\Rest\Shipping\Model\CustomsDetails|null
     */
    public function getCustoms(): ?\Dhl\Rest\Shipping\Model\CustomsDetails
    {
        return $this->container['customs'];
    }

    /**
     * Sets customs
     *
     * @param \Dhl\Rest\Shipping\Model\CustomsDetails|null $customs customs
     *
     * @return $this
     */
    public function setCustoms(?\Dhl\Rest\Shipping\Model\CustomsDetails $customs): static
    {
        if (is_null($customs)) {
            throw new InvalidArgumentException('non-nullable customs cannot be null');
        }
        $this->container['customs'] = $customs;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


